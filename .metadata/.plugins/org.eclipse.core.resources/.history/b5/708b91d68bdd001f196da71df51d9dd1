package service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import entities.Agenda;
import entities.Consulta;
import entities.Status;

public class FiltrosEOrdenacao {

	public static List<Consulta> ordenarPeloNomeDoPaciente() { // ordenar todas as consultas pelo nome do paciente		
		List<Consulta> lista = Agenda.mostrarTodasAsConsultas();
		Collections.sort(lista, (p1, p2) -> p1.getPaciente().getNome().compareTo(p2.getPaciente().getNome())); // fazendo o compareTo usando Lambda
		return lista;
	}
	
	public static List<Consulta> ordenarPelaDataDeAtendimento() { // ordenar pela data de atendimento 
		List<Consulta> lista = Agenda.mostrarTodasAsConsultas();
		Collections.sort(lista, (c1, c2) -> c1.getData().compareTo(c2.getData())); // fazendo o compareTo usando Lambda
		return lista; 
	}
	
	public static Double somaTotalDoValorDasConsultasConcluidas() { // valor total das consultas concluidas
		List<Consulta> lista = Agenda.mostrarTodasAsConsultas();
		return lista.stream().filter(c -> c.getStatus() == Status.CONCLUIDO).map(Consulta::getValor).reduce(0.0, (a, b) -> a + b);
	}

	public static List<Consulta> filtrarConsultasQueDevemSerAtendidas() { // filtrar consultas com status de "agendada"
		List<Consulta> lista = Agenda.mostrarTodasAsConsultas();
		List<Consulta> listaFiltrada = lista.stream().filter(c -> c.getStatus() == Status.AGENDADO).collect(Collectors.toList());
		return listaFiltrada;
	}
	
	public static List<Consulta> filtrarConsultasConcluidas() { // filtrar consultas com status de "concluida"
		List<Consulta> lista = Agenda.mostrarTodasAsConsultas();
		List<Consulta> listaFiltrada = lista.stream().filter(c -> c.getStatus() == Status.CONCLUIDO).collect(Collectors.toList());
		return listaFiltrada;
	}
	
	public static Consulta filtrarPeloCPF(int cpfDoPaciente) {
		
		List<Consulta> lista = Agenda.mostrarTodasAsConsultas();
		Consulta listaFiltrada = (Consulta) lista.stream().filter(c -> c.getPaciente().getCpf() == cpfDoPaciente); 
		return listaFiltrada;
	}

}
