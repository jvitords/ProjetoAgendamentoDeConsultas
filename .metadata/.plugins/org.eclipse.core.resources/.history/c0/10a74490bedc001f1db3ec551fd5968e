package entities;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import exceptions.DomainExceptions;
import service.ServicoDePagamento;
import service.ServicoDePagamentoComConvenio;
import service.ServicoDePagamentoSemConvenio;

public class Agenda {
	
	private List<Consulta> listaDeConsultas;
	
	public Agenda(List<Consulta> listaDeConsultas) {
		this.listaDeConsultas = listaDeConsultas;
	}

	public List<Consulta> getListaDeConsultas() {
		return listaDeConsultas;
	}

	public void setListaDeConsultas(List<Consulta> listaDeConsultas) {
		this.listaDeConsultas = listaDeConsultas;
	}

	public static List<Consulta> mostrarTodasAsConsultas() { // método para ler todas as consultas registradas no meu arquivo txt
		
		List<Consulta> lista = new ArrayList<Consulta>();
		
		System.out.println("----- CONSULTAS AGENDADAS -----\n");
		// abrir o arquivo e ler as informações
		try(BufferedReader leitorDoArquivo = new BufferedReader(new FileReader("C:\\Users\\JoãoVitorDuarteSanto\\Documents\\Estudos\\ProjetoAgendamento\\ProjetoAgendamentoDeConsultas\\Agendamentos.txt"))){
			// instanciar um "Paciente" e "Consulta" para mostrar as informações que estão na agenda 
			String lerLinha = leitorDoArquivo.readLine();
			while (lerLinha != null) {
				
				lerLinha = lerLinha.trim(); // limpa espaços vazios no arquivo txt
				
				String [] separadorDasInformacoes = lerLinha.split(",");
				Paciente paciente = new Paciente(separadorDasInformacoes[0], Integer.parseInt(separadorDasInformacoes[1]));
				
				// data e horário da consulta
				String dataRecebida = separadorDasInformacoes[2];
				DateTimeFormatter formatoDaData = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
				LocalDateTime data = LocalDateTime.parse(dataRecebida, formatoDaData);
				
				// procedimento escolhido 
				String procedimento = separadorDasInformacoes[3];
				
				// valor do procedimento 
				Double valor = Double.parseDouble(separadorDasInformacoes[4]);
				
				// analisar se a consulta é de convênio ou particular
				String tipoDaConsultaString = separadorDasInformacoes[5];
				TipoDoCliente tipo = null;
				if(tipoDaConsultaString.toLowerCase().charAt(0) == 'c') {
					tipo = TipoDoCliente.COM_CONVENIO;
				}
				else {
					tipo = TipoDoCliente.SEM_CONVENIO;
				}
				Consulta consulta = new Consulta(paciente, data, valor, procedimento, Status.AGENDADO, tipo); // dps preciso arrumar isso, pois está colocando todas com status de agendada
				lista.add(consulta);
				lerLinha = leitorDoArquivo.readLine();	
				
			}
			// modelo de mostrar as informações no console
			DateTimeFormatter formatoDaData = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
			for(Consulta consulta1 : lista) {
				System.out.println( consulta1.getPaciente().getNome() + " - " + consulta1.getProcedimento() + " - " + consulta1.getData().format(formatoDaData) + 
						" - " + consulta1.getTipoDoCliente().getTipo() + " - R$" + consulta1.getValor());
			}
		}
		catch (DateTimeParseException erroAoReceberDataDoArquivoTXT) {
			System.out.println("ERRO: " + erroAoReceberDataDoArquivoTXT);
			throw new DomainExceptions("Erro ao receber a data do arquivo TXT");
		}
		catch (Exception e) {
			System.out.println("Ocorreu uma exceção geral: " + e);
		}
		return lista;
	}
	
	public static void registrarNovaConsulta() { // método para registrar novas consultas
		
		try { // receber os dados da consulta e inicialzar a mesma
			Scanner scanner = new Scanner(System.in);
			System.out.print("Nome do paciente: ");
			String nomeDoPaciente = scanner.nextLine();
			System.out.print("CPF do paciente: ");
			Integer cpfDoPaciente = scanner.nextInt();
			scanner.nextLine();
			
			DateTimeFormatter formatoDaData = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
			System.out.print("Data e horário da consulta: (dd/MM/yyyy HH:mm)");
			String dataRecebida = scanner.nextLine();
			LocalDateTime dataDoAgendamento = LocalDateTime.parse(dataRecebida, formatoDaData);
			
			System.out.print("Valor da consulta: R$");
			Double valorDaConsulta = scanner.nextDouble();
			scanner.nextLine();
			
			System.out.print("Procedimento: ");
			String procedimento = scanner.nextLine();
			
			Status status = Status.AGENDADO;

			System.out.print("Tipo da consulta: (particular/convênio)");
			String tipoDaConsulta = scanner.nextLine();
			
			Consulta consulta = null;
			
			if (tipoDaConsulta.toLowerCase().charAt(0) == 'c') { // consulta com convênio 
				Consulta consultaConvenio = new Consulta(new Paciente(nomeDoPaciente, cpfDoPaciente), dataDoAgendamento, valorDaConsulta, procedimento, status, TipoDoCliente.COM_CONVENIO);
				ServicoDePagamentoComConvenio servicoDePagamento = new ServicoDePagamentoComConvenio(consultaConvenio);
				servicoDePagamento.calcularValorDaConsulta(consultaConvenio.getValor());
				consulta = consultaConvenio;
			} 
			else if (tipoDaConsulta.toLowerCase().charAt(0) == 'p') { // consulta particular
				Consulta consultaParticular = new Consulta(new Paciente(nomeDoPaciente, cpfDoPaciente), dataDoAgendamento, valorDaConsulta, procedimento, status, TipoDoCliente.SEM_CONVENIO);
				ServicoDePagamentoSemConvenio servicoDePagamento2 = new ServicoDePagamentoSemConvenio(consultaParticular);
				servicoDePagamento2.calcularValorDaConsulta(consultaParticular.getValor());
				consulta = consultaParticular;
			} 
			else {
				System.out.println("Não foi possível inicializar a consulta, veja se os dados foram digitados corretamente!");
			}
			
			try (// registrar essa nova consulta no nosso arquivo txt
			BufferedWriter registrarNoArquivo = new BufferedWriter(new FileWriter("C:\\Users\\JoãoVitorDuarteSanto\\Documents\\Estudos\\ProjetoAgendamento\\ProjetoAgendamentoDeConsultas\\Agendamentos.txt", true))) {
				String registrarConsulta = consulta.getPaciente().getNome() + "," + consulta.getPaciente().getCpf() + "," + consulta.getData().format(formatoDaData) + "," + 
				consulta.getProcedimento() + "," + consulta.getValor() + "," + consulta.getTipoDoCliente().getTipo();
				registrarNoArquivo.newLine();
				registrarNoArquivo.write(registrarConsulta);
				System.out.println("*** Consulta registrada com sucesso! ***");
			}
			scanner.close();
		} 
		catch (InputMismatchException erroAoDigitarInt) {
			System.out.println("Aconteceu uma exceção ao receber os dados do CPF: " + erroAoDigitarInt);
			throw new DomainExceptions("Erro ao digitar CPF");
		}
		catch (DateTimeParseException erroAoDigitarData) {
			System.out.println("Aconteceu uma exceção ao receber a data da consulta: " + erroAoDigitarData);
			throw new DomainExceptions("Erro ao digitar a data");
		}
		catch (FileNotFoundException arquivoNaoEncontrado) {
			System.out.println("Aconteceu uma exceção ao procurar o arquivo da consulta: " + arquivoNaoEncontrado);
			throw new DomainExceptions("Erro ao procurar arquivo");
		}
		catch (Exception e) {
			System.out.println("Aconteceu uma exceção geral: " + e);
		}
	}
}
